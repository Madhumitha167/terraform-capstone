on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
jobs:
  apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: Terraform init
        run : terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve
      - name: Terraform output(private ip of 1)
        run: terraform output private_ip1
      - name: Run Ansible playbook on a specific host
        run: |
           public_ip1=$(terraform output public_ip1)
           echo "$public_ip1"
           mkdir -p ~/.ssh
           echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
           chmod 700 ~/.ssh/id_rsa
           echo "server1 ansible_host=$public_ip1 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory
           ansible -i inventory ping server1
           ansible-playbook -i inventory playbook.yml
      - name: Terraform output(private ip of 2)
        run: terraform output private_ip2
      - name: Terraform Output(public ip of 2)
        run: terraform output public_ip2
      - name: Configure SSH Key
        run: |
           mkdir -p ~/.ssh
           echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
           chmod 700 ~/.ssh/id_rsa
      - name: Terraform destroy
        run: terraform destroy -auto-approve 
        if: failure() || success()

      
